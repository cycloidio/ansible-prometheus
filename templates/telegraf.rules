groups:
#
# System
#
- name: telegraf.rules
  rules:
  #
  # System
  #

{% for user_config in prometheus_telegraf_rules_config.get('CPUUsage', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['CPUUsage']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: (100 - cpu_usage_idle{cpu="cpu-total", {{ c['selector'] }} }) > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{$labels.instance}}{% endraw %}: CPU usage is above {{ c['threshold'] }}% (current value is: {%- raw %}{{ $value }}{% endraw %})'
      summary: '{%- raw %}{{$labels.instance}}{% endraw %}: High CPU usage detected'
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('MemoryUsage', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['MemoryUsage']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: (100 - mem_available_percent{ {{ c['selector'] }} }) > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{$labels.instance}}{% endraw %}: Memory usage is above {{ c['threshold'] }}% (current value is: {%- raw %}{{ $value }}{% endraw %})'
      summary: '{%- raw %}{{$labels.instance}}{% endraw %}: High memory usage detected'
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('LoadAverage', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['LoadAverage']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: (system_load5{ {{ c['selector'] }} } / system_n_cpus{ {{ c['selector'] }} }) > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{$labels.instance}}: LoadAverage is high (current value is: {{ $value }} per cpu)'
      summary: '{{$labels.instance}}: High LoadAverage detected'
    {% endraw %}
{% endfor %}


{% for user_config in prometheus_telegraf_rules_config.get('LowDiskSpace', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['LowDiskSpace']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: disk_used_percent{ {{ c['selector'] }} } > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{$labels.instance}}{% endraw %}: {%- raw %}{{$labels.path}}{% endraw %} disk usage is above {{ c['threshold'] }}% (current value is: {%- raw %}{{ $value }}{% endraw %})'
      summary: '{%- raw %}{{$labels.instance}}{% endraw %}: Low disk space'
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('LowDiskInodes', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['LowDiskInodes']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: ((disk_inodes_used{ {{ c['selector'] }} } / disk_inodes_total{ {{ c['selector'] }} }) * 100) > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{$labels.instance}}{% endraw %}: {%- raw %}{{$labels.path}}{% endraw %} disk inodes is above {{ c['threshold'] }}% (current value is: {%- raw %}{{ $value }}{% endraw %})'
      summary: '{%- raw %}{{$labels.instance}}{% endraw %}: Low disk inodes'
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('InstanceDown', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['InstanceDown']) | combine(user_config) %}

  # Do not raise down alarm for preprod and dev instances
  - alert: {{ c['name'] }}
    expr: up{ {{  c['selector'] }} } == 0
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{ $labels.instance }}{% endraw %} - {%- raw %}{{ $labels.Name }}{% endraw %} has been down for more than {{ c['for'] }} minutes.'
      summary: 'Instance {%- raw %}{{ $labels.instance }}{% endraw %} down'
{% endfor %}

  #
  # Http
  #

{% for user_config in prometheus_telegraf_rules_config.get('HttpResponseCode', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['HttpResponseCode']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: http_response_http_response_code{ {{ c['selector'] }} } > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{ $labels.instance }}{% endraw %} - {%- raw %}{{ $labels.server }}{% endraw %} return code > {{ c['threshold'] }} for more than {{ c['for'] }} minutes.'
      summary: 'Instance {%- raw %}{{ $labels.instance }}{% endraw %} return code {%- raw %}{{ $value }}{% endraw %} > {{ c['threshold'] }}'
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('HttpResponseStringMatch', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['HttpResponseStringMatch']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: http_response_response_string_match{ {{ c['selector'] }} } == 0
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - {{ $labels.server }} not able to match the requested string.'
      summary: 'Instance {{ $labels.instance }} - {{ $labels.server }} pattern not found'
    {% endraw %}
{% endfor %}

  # Using min_over_time https://prometheus.io/docs/prometheus/latest/querying/functions/#aggregation-_over_time
  # As we run this check only every 30min, there is some hole in the graph.
  # So we are taking the min value to have enough data for the alert. Keeping in mind that this alert should
  # Change value only once a day. Having a 1h step is ok.

{% for user_config in prometheus_telegraf_rules_config.get('LbCertsExpireCheck', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['LbCertsExpireCheck']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: min_over_time(aws_lb_certs_expire_days{ {{ c['selector'] }} }[1h]) < {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - cert {{ $labels.cert }} for {{ $labels.cert_cn }} will expire in {{ $value }} days.'
      summary: 'Instance {{ $labels.instance }} - found cert {{ $labels.cert_cn }} will expire in {{ $value }} days'
    {% endraw %}
{% endfor %}

  #
  # Mongodb
  #
#  # TODO migrate this on mongodb_db_stats.
#  # For now Telegraf from debian too old to enable gather_db_stats https://github.com/influxdata/telegraf/blob/master/plugins/inputs/mongodb/README.md
#  - alert: MongodbOk
#    expr: mongodb_ok == 0
#    for: 5m
#    annotations:
#    {%- raw %}
#      description: '{{ $labels.instance }} - Mongodb not ok for more than 5 minutes.'
#      summary: 'Instance {{ $labels.instance }} Ko'
#    {% endraw %}

  #
  # Amazon SES
  #

{% for user_config in prometheus_telegraf_rules_config.get('SesSentQuota', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['SesSentQuota']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: ( sum (aws_ses_quota{type="sent",{{ c['selector'] }}}) without (type) / sum (aws_ses_quota{type="max",{{ c['selector'] }}}) without (type) ) * 100 > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - SES sent {{ $value }}% quota used.'
      summary: '{{ $labels.instance }} - SES sent {{ $value }}% quota used.'
    {% endraw %}
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('SesReputation', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['SesReputation']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: (aws_ses_reputation{type="bounces",{{ c['selector'] }}} or aws_ses_reputation{type="complaints",{{ c['selector'] }}}) > {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - SES {{ $labels.type }} reputation is {{ $value }}.'
      summary: '{{ $labels.instance }} - SES {{ $labels.type }} reputation is {{ $value }}.'
    {% endraw %}
{% endfor %}

  #
  # Amazon CPUCredit
  #

{% for user_config in prometheus_telegraf_rules_config.get('EC2CpuCreditBalance', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['EC2CpuCreditBalance']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: cloudwatch_aws_ec2_cpu_credit_balance_average{ {{ c['selector'] }} } < {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - Aws EC2 {{ $labels.instance_id }} CPU Credit Balance low {{ $value }}.'
      summary: '{{ $labels.instance }} - Aws EC2 {{ $labels.instance_id }} CPU Credit Balance low {{ $value }}.'
    {% endraw %}
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('RDSCpuCreditBalance', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['RDSCpuCreditBalance']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: cloudwatch_aws_rds_cpu_credit_balance_average{ {{ c['selector'] }} } < {{ c['threshold'] }}
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - Aws RDS {{ $labels.db_instance_identifier }} CPU Credit Balance low {{ $value }}.'
      summary: '{{ $labels.instance }} - Aws RDS {{ $labels.db_instance_identifier }} CPU Credit Balance low {{ $value }}.'
    {% endraw %}
{% endfor %}

  #
  # Amazon Events
  #

{% for user_config in prometheus_telegraf_rules_config.get('EC2Events', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['EC2Events']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: aws_ec2_instance_events{ {{ c['selector'] }} } > 0
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: warning
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - Aws EC2 instance {{ $labels.instance_id }} has {{ $value }} scheduled events.'
      summary: '{{ $labels.instance }} - Aws EC2 instance {{ $labels.instance_id }} has {{ $value }} scheduled events.'
    {% endraw %}
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('RDSEvents', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['RDSEvents']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: aws_rds_instance_events{ {{ c['selector'] }} } > 0
    for: {{ c['for'] }}
    labels:
      {% raw -%}
      customer: '{{ $labels.client }}'
      project: '{{ $labels.project }}'
      role: '{{ $labels.role }}'
      env: '{{ $labels.env }}'
      {% endraw -%}
      severity: warning
      receiver: {{ c['receiver'] }}
    annotations:
    {%- raw %}
      description: '{{ $labels.instance }} - Aws RDS instance {{ $labels.instance_id }} has {{ $value }} scheduled events.'
      summary: '{{ $labels.instance }} - Aws RDS instance {{ $labels.instance_id }} has {{ $value }} scheduled events.'
    {% endraw %}
{% endfor %}

  #
  # EventStore
  #

{% for user_config in prometheus_telegraf_rules_config.get('EventstoreIsAlive', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['EventstoreIsAlive']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: eventstore_isAlive == 0
    for: {{ c['for'] }}
    labels:
      {% raw -%} 
      customer: '{{ $labels.client }}' 
      project: '{{ $labels.project }}' 
      role: '{{ $labels.role }}' 
      env: '{{ $labels.env }}' 
      {% endraw -%} 
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{$labels.instance}}{% endraw %}: detected the node {%- raw %}{{$labels.node}}{% endraw %} as dead)'
      summary: '{%- raw %}{{$labels.instance}}{% endraw %}: detected the node {%- raw %}{{$labels.node}}{% endraw %} as dead)'
{% endfor %}

{% for user_config in prometheus_telegraf_rules_config.get('EventstoreCheckError', [{}]) %}
  {% set c = _prometheus_telegraf_rules_default_global | combine(prometheus_telegraf_rules_config_default['EventstoreCheckError']) | combine(user_config) %}

  - alert: {{ c['name'] }}
    expr: eventstore_check_error == 1
    for: {{ c['for'] }}
    labels:
      {% raw -%} 
      customer: '{{ $labels.client }}' 
      project: '{{ $labels.project }}' 
      role: '{{ $labels.role }}' 
      env: '{{ $labels.env }}' 
      {% endraw -%} 
      severity: {{ c['severity'] }}
      receiver: {{ c['receiver'] }}
    annotations:
      description: '{%- raw %}{{$labels.instance}}{% endraw %}: Error {%- raw %}{{$labels.reason}}{% endraw %} while running the eventstore check)'
      summary: '{%- raw %}{{$labels.instance}}{% endraw %}: Error running eventstore check'
{% endfor %}

